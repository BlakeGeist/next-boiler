{"ast":null,"code":"var _parseFloat = require(\"@babel/runtime-corejs2/core-js/parse-float\");\n\nvar filterOutliers = function filterOutliers(someArray) {\n  if (someArray.length < 4) return someArray;\n  var values, q1, q3, iqr, maxValue, minValue;\n  values = someArray.slice().sort(function (a, b) {\n    return a - b;\n  }); //copy array fast and sort\n\n  if (values.length / 4 % 1 === 0) {\n    //find quartiles\n    q1 = 1 / 2 * (values[values.length / 4] + values[values.length / 4 + 1]);\n    q3 = 1 / 2 * (values[values.length * (3 / 4)] + values[values.length * (3 / 4) + 1]);\n  } else {\n    q1 = values[Math.floor(values.length / 4 + 1)];\n    q3 = values[Math.ceil(values.length * (3 / 4) + 1)];\n  }\n\n  iqr = q3 - q1;\n  maxValue = q3 + iqr * 1.5;\n  minValue = q1 - iqr * 1.5;\n  return values.filter(function (x) {\n    return x >= minValue && x <= maxValue;\n  });\n};\n\nvar getAverage = function getAverage(someArray) {\n  var total = 0;\n  someArray.forEach(function (_float) {\n    total += _parseFloat(_float);\n  });\n  var average = total / someArray.length;\n  return average;\n};\n\nvar roundMoney = function roundMoney(_float2) {\n  return Math.ceil(_float2 * 100) / 100;\n};\n\nvar moneyRoundOfArray = function moneyRoundOfArray(someArray) {\n  var total = 0;\n  someArray.forEach(function (number) {\n    total += _parseFloat(number);\n  });\n  return roundMoney(total);\n};\n\nvar firstNumber = function firstNumber(string) {\n  if (string.match(/\\d+/)) {\n    if (string.match(/\\d+/)[0] > 4) {\n      return 1;\n    } else {\n      return string.match(/\\d+/)[0];\n    }\n  } else {\n    return 1;\n  }\n};\n\nvar priceByQTY = function priceByQTY(number, price) {\n  return \"$\" + roundMoney(price / number);\n};\n\nvar translate = function translate(string, strings, lang) {\n  if (strings[string] && strings[string][lang]) return strings[string][lang];\n  return null;\n};\n\nmodule.exports = {\n  filterOutliers: filterOutliers,\n  getAverage: getAverage,\n  roundMoney: roundMoney,\n  firstNumber: firstNumber,\n  priceByQTY: priceByQTY,\n  moneyRoundOfArray: moneyRoundOfArray,\n  translate: translate\n};","map":{"version":3,"sources":["C:/Users/Blake Geist/Documents/blakes-apps/react/next-firebase-boiler/src/app/helpers/quickHelpers.js"],"names":["filterOutliers","someArray","length","values","q1","q3","iqr","maxValue","minValue","slice","sort","a","b","Math","floor","ceil","filter","x","getAverage","total","forEach","float","average","roundMoney","moneyRoundOfArray","number","firstNumber","string","match","priceByQTY","price","translate","strings","lang","module","exports"],"mappings":"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","sourcesContent":["const filterOutliers = (someArray) => {\r\n    if(someArray.length < 4)\r\n        return someArray;\r\n    let values, q1, q3, iqr, maxValue, minValue;\r\n    values = someArray.slice().sort( (a, b) => a - b);//copy array fast and sort\r\n    if((values.length / 4) % 1 === 0){//find quartiles\r\n        q1 = 1/2 * (values[(values.length / 4)] + values[(values.length / 4) + 1]);\r\n        q3 = 1/2 * (values[(values.length * (3 / 4))] + values[(values.length * (3 / 4)) + 1]);\r\n    } else {\r\n        q1 = values[Math.floor(values.length / 4 + 1)];\r\n        q3 = values[Math.ceil(values.length * (3 / 4) + 1)];\r\n    }\r\n    iqr = q3 - q1;\r\n    maxValue = q3 + iqr * 1.5;\r\n    minValue = q1 - iqr * 1.5;\r\n    return values.filter((x) => (x >= minValue) && (x <= maxValue));\r\n};\r\n\r\nconst getAverage = (someArray) => {\r\n    let total = 0;\r\n    someArray.forEach((float) => {\r\n        total += parseFloat(float);\r\n    });\r\n    let average = total / someArray.length;\r\n    return average;\r\n};\r\n\r\nconst roundMoney = (float) => {\r\n    return Math.ceil(float * 100) / 100;\r\n};\r\n\r\nconst moneyRoundOfArray = (someArray) => {\r\n    let total = 0;\r\n    someArray.forEach(number => {\r\n        total += parseFloat(number);\r\n    });\r\n    return roundMoney(total);\r\n};\r\n\r\nconst firstNumber = (string) => {\r\n    if(string.match(/\\d+/)){\r\n        if (string.match(/\\d+/)[0] > 4) {\r\n            return 1;\r\n        } else {\r\n            return string.match(/\\d+/)[0];\r\n        }\r\n    } else {\r\n        return 1;\r\n    }\r\n};\r\n\r\nconst priceByQTY = (number, price) => {\r\n    return \"$\" + roundMoney(price / number);\r\n};\r\n\r\nconst translate = (string, strings, lang) => { \r\n    if (strings[string] && strings[string][lang]) return strings[string][lang];\r\n    return null;\r\n};\r\n\r\nmodule.exports = {\r\n    filterOutliers,\r\n    getAverage,\r\n    roundMoney,\r\n    firstNumber,\r\n    priceByQTY,\r\n    moneyRoundOfArray,\r\n    translate\r\n};\r\n"]},"metadata":{},"sourceType":"script"}