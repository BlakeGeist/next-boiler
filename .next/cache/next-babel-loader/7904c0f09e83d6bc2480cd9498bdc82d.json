{"ast":null,"code":"var _Promise = require(\"@babel/runtime-corejs2/core-js/promise\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime-corejs2/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\");\n\nvar AWS = require(\"aws-sdk\");\n\nvar admin = require(\"firebase-admin\");\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(require(\"../../credentials/server\"))\n  });\n}\n\nvar db = admin.firestore();\n\nvar cors = require(\"cors\")({\n  origin: true\n});\n\nvar stringsCollection = db.collection(\"strings\"); //takes a string(text) and a (slug)\n//check the database for if the slug already exists\n//if it does, this should prolly be an update function\n//if the string does not exist, run the createString funciton\n\nexports.handler = function (req, res) {\n  cors(req, res, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _req$body, slug, text, scope, existingDoc, docExists, strings;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _req$body = req.body, slug = _req$body.slug, text = _req$body.text, scope = _req$body.scope;\n            _context.prev = 1;\n            existingDoc = stringsCollection.doc(slug).get();\n            docExists = existingDoc.exists;\n\n            if (!docExists) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 11;\n            break;\n\n          case 7:\n            _context.next = 9;\n            return createStrings(text, slug, scope);\n\n          case 9:\n            strings = _context.sent;\n            res.status(200).send(strings);\n\n          case 11:\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](1);\n            res.status(500).send(_context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 13]]);\n  })));\n}; //takes a string(text) and a (slug)\n//check the database for if the slug already exists\n//if it does, this should prolly be an update function\n//if the string does not exist, run the createString funciton\n\n\nfunction createStrings(_x, _x2, _x3) {\n  return _createStrings.apply(this, arguments);\n} //takes a string and a target language, sends it to AWS translate, and returns the result\n\n\nfunction _createStrings() {\n  _createStrings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(stringText, slug, scope) {\n    var object;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getTranslatedString(stringText, \"ar\");\n\n          case 2:\n            _context2.t0 = _context2.sent;\n            _context2.next = 5;\n            return getTranslatedString(stringText, \"da\");\n\n          case 5:\n            _context2.t1 = _context2.sent;\n            _context2.next = 8;\n            return getTranslatedString(stringText, \"de\");\n\n          case 8:\n            _context2.t2 = _context2.sent;\n            _context2.next = 11;\n            return getTranslatedString(stringText, \"en\");\n\n          case 11:\n            _context2.t3 = _context2.sent;\n            _context2.next = 14;\n            return getTranslatedString(stringText, \"es\");\n\n          case 14:\n            _context2.t4 = _context2.sent;\n            _context2.next = 17;\n            return getTranslatedString(stringText, \"fr\");\n\n          case 17:\n            _context2.t5 = _context2.sent;\n            _context2.next = 20;\n            return getTranslatedString(stringText, \"it\");\n\n          case 20:\n            _context2.t6 = _context2.sent;\n            _context2.next = 23;\n            return getTranslatedString(stringText, \"ja\");\n\n          case 23:\n            _context2.t7 = _context2.sent;\n            _context2.next = 26;\n            return getTranslatedString(stringText, \"ko\");\n\n          case 26:\n            _context2.t8 = _context2.sent;\n            _context2.next = 29;\n            return getTranslatedString(stringText, \"pt\");\n\n          case 29:\n            _context2.t9 = _context2.sent;\n            _context2.next = 32;\n            return getTranslatedString(stringText, \"ru\");\n\n          case 32:\n            _context2.t10 = _context2.sent;\n            object = {\n              ar: _context2.t0,\n              da: _context2.t1,\n              de: _context2.t2,\n              en: _context2.t3,\n              es: _context2.t4,\n              fr: _context2.t5,\n              it: _context2.t6,\n              jp: _context2.t7,\n              ko: _context2.t8,\n              pt: _context2.t9,\n              ru: _context2.t10\n            };\n            stringsCollection.doc(scope).collection(\"strings\").doc(slug).set(object).then(function () {\n              return object;\n            })[\"catch\"](function (e) {});\n            return _context2.abrupt(\"return\", object);\n\n          case 36:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _createStrings.apply(this, arguments);\n}\n\nfunction getTranslatedString(_x4, _x5) {\n  return _getTranslatedString.apply(this, arguments);\n}\n\nfunction _getTranslatedString() {\n  _getTranslatedString = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(string, targetLang) {\n    var ep, translate, params, promise, result;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            AWS.config.region = \"us-east-1\";\n            ep = new AWS.Endpoint(\"https://translate.us-east-1.amazonaws.com\");\n            AWS.config.credentials = new AWS.Credentials(\"AKIAJQLVBELRL5AAMZOA\", \"Kl0ArGHFySw+iBEdGXZDrTch2V5VAaDbSs+EKKEZ\");\n            translate = new AWS.Translate();\n            translate.endpoint = ep;\n            params = {\n              Text: string,\n              SourceLanguageCode: \"en\",\n              TargetLanguageCode: targetLang\n            };\n            promise = new _Promise(function (resolve, reject) {\n              translate.translateText(params, function (err, data) {\n                if (err) return reject(err);else {\n                  return resolve(data);\n                }\n              });\n            });\n            _context3.next = 9;\n            return promise;\n\n          case 9:\n            result = _context3.sent;\n            return _context3.abrupt(\"return\", result.TranslatedText);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getTranslatedString.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}