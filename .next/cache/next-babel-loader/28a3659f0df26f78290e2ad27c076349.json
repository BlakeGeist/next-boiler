{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Editor, EditorState, RichUtils } from 'draft-js';\nexport default class RichEditorExample extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onChange\", editorState => {\n      this.props.onChange('editorState', editorState);\n    });\n\n    _defineProperty(this, \"focus\", () => this.refs.editor.focus());\n\n    _defineProperty(this, \"handleKeyCommand\", command => {\n      const {\n        editorState\n      } = this.props;\n      const newState = RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        this.onChange(newState);\n        return true;\n      }\n\n      return false;\n    });\n\n    _defineProperty(this, \"onTab\", e => {\n      const maxDepth = 4;\n      this.onChange(RichUtils.onTab(e, this.props.editorState, maxDepth));\n    });\n\n    _defineProperty(this, \"toggleBlockType\", blockType => {\n      this.onChange(RichUtils.toggleBlockType(this.props.editorState, blockType));\n    });\n\n    _defineProperty(this, \"toggleInlineStyle\", inlineStyle => {\n      this.onChange(RichUtils.toggleInlineStyle(this.props.editorState, inlineStyle));\n    });\n  }\n\n  render() {\n    const {\n      editorState\n    } = this.props; // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n\n    let className = 'RichEditor-editor';\n    var contentState = editorState.getCurrentContent();\n\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n\n    return __jsx(\"div\", {\n      className: \"RichEditor-root\"\n    }, __jsx(BlockStyleControls, {\n      editorState: editorState,\n      onToggle: this.toggleBlockType\n    }), __jsx(InlineStyleControls, {\n      editorState: editorState,\n      onToggle: this.toggleInlineStyle\n    }), __jsx(\"div\", {\n      className: className,\n      onClick: this.focus\n    }, __jsx(Editor, {\n      blockStyleFn: getBlockStyle,\n      customStyleMap: styleMap,\n      editorState: editorState,\n      handleKeyCommand: this.handleKeyCommand,\n      onChange: this.onChange,\n      onTab: this.onTab,\n      placeholder: \"Tell a story...\",\n      ref: \"editor\",\n      spellCheck: true\n    })));\n  }\n\n} // Custom overrides for \"code\" style.\n\nconst styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote';\n\n    default:\n      return null;\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n\n    this.onToggle = e => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = 'RichEditor-styleButton';\n\n    if (this.props.active) {\n      className += ' RichEditor-activeButton';\n    }\n\n    return __jsx(\"span\", {\n      className: className,\n      onMouseDown: this.onToggle\n    }, this.props.label);\n  }\n\n}\n\nconst BLOCK_TYPES = [{\n  label: 'H1',\n  style: 'header-one'\n}, {\n  label: 'H2',\n  style: 'header-two'\n}, {\n  label: 'H3',\n  style: 'header-three'\n}, {\n  label: 'H4',\n  style: 'header-four'\n}, {\n  label: 'H5',\n  style: 'header-five'\n}, {\n  label: 'H6',\n  style: 'header-six'\n}, {\n  label: 'Blockquote',\n  style: 'blockquote'\n}, {\n  label: 'UL',\n  style: 'unordered-list-item'\n}, {\n  label: 'OL',\n  style: 'ordered-list-item'\n}, {\n  label: 'Code Block',\n  style: 'code-block'\n}];\n\nconst BlockStyleControls = props => {\n  const {\n    editorState\n  } = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  return __jsx(\"div\", {\n    className: \"RichEditor-controls\"\n  }, BLOCK_TYPES.map(type => __jsx(StyleButton, {\n    key: type.label,\n    active: type.style === blockType,\n    label: type.label,\n    onToggle: props.onToggle,\n    style: type.style\n  })));\n};\n\nvar INLINE_STYLES = [{\n  label: 'Bold',\n  style: 'BOLD'\n}, {\n  label: 'Italic',\n  style: 'ITALIC'\n}, {\n  label: 'Underline',\n  style: 'UNDERLINE'\n}, {\n  label: 'Monospace',\n  style: 'CODE'\n}];\n\nconst InlineStyleControls = props => {\n  var currentStyle = props.editorState.getCurrentInlineStyle();\n  return __jsx(\"div\", {\n    className: \"RichEditor-controls\"\n  }, INLINE_STYLES.map(type => __jsx(StyleButton, {\n    key: type.label,\n    active: currentStyle.has(type.style),\n    label: type.label,\n    onToggle: props.onToggle,\n    style: type.style\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}