{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { Editor, EditorState, RichUtils } from 'draft-js';\n\nvar RichEditorExample = /*#__PURE__*/function (_React$Component) {\n  _inherits(RichEditorExample, _React$Component);\n\n  var _super = _createSuper(RichEditorExample);\n\n  function RichEditorExample() {\n    var _this;\n\n    _classCallCheck(this, RichEditorExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (editorState) {\n      _this.props.onChange('editorState', editorState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"focus\", function () {\n      return _this.refs.editor.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyCommand\", function (command) {\n      var editorState = _this.props.editorState;\n      var newState = RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        _this.onChange(newState);\n\n        return true;\n      }\n\n      return false;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTab\", function (e) {\n      var maxDepth = 4;\n\n      _this.onChange(RichUtils.onTab(e, _this.props.editorState, maxDepth));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleBlockType\", function (blockType) {\n      _this.onChange(RichUtils.toggleBlockType(_this.props.editorState, blockType));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleInlineStyle\", function (inlineStyle) {\n      _this.onChange(RichUtils.toggleInlineStyle(_this.props.editorState, inlineStyle));\n    });\n\n    return _this;\n  }\n\n  _createClass(RichEditorExample, [{\n    key: \"render\",\n    value: function render() {\n      var editorState = this.props.editorState; // If the user changes block type before entering any text, we can\n      // either style the placeholder or hide it. Let's just hide it now.\n\n      var className = 'RichEditor-editor';\n      var contentState = editorState.getCurrentContent();\n\n      if (!contentState.hasText()) {\n        if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n          className += ' RichEditor-hidePlaceholder';\n        }\n      }\n\n      return __jsx(\"div\", {\n        className: \"RichEditor-root\"\n      }, __jsx(BlockStyleControls, {\n        editorState: editorState,\n        onToggle: this.toggleBlockType\n      }), __jsx(InlineStyleControls, {\n        editorState: editorState,\n        onToggle: this.toggleInlineStyle\n      }), __jsx(\"div\", {\n        className: className,\n        onClick: this.focus\n      }, __jsx(Editor, {\n        blockStyleFn: getBlockStyle,\n        customStyleMap: styleMap,\n        editorState: editorState,\n        handleKeyCommand: this.handleKeyCommand,\n        onChange: this.onChange,\n        onTab: this.onTab,\n        placeholder: \"Tell a story...\",\n        ref: \"editor\",\n        spellCheck: true\n      })));\n    }\n  }]);\n\n  return RichEditorExample;\n}(React.Component); // Custom overrides for \"code\" style.\n\n\nexport { RichEditorExample as default };\nvar styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote';\n\n    default:\n      return null;\n  }\n}\n\nvar StyleButton = /*#__PURE__*/function (_React$Component2) {\n  _inherits(StyleButton, _React$Component2);\n\n  var _super2 = _createSuper(StyleButton);\n\n  function StyleButton() {\n    var _this2;\n\n    _classCallCheck(this, StyleButton);\n\n    _this2 = _super2.call(this);\n\n    _this2.onToggle = function (e) {\n      e.preventDefault();\n\n      _this2.props.onToggle(_this2.props.style);\n    };\n\n    return _this2;\n  }\n\n  _createClass(StyleButton, [{\n    key: \"render\",\n    value: function render() {\n      var className = 'RichEditor-styleButton';\n\n      if (this.props.active) {\n        className += ' RichEditor-activeButton';\n      }\n\n      return __jsx(\"span\", {\n        className: className,\n        onMouseDown: this.onToggle\n      }, this.props.label);\n    }\n  }]);\n\n  return StyleButton;\n}(React.Component);\n\nvar BLOCK_TYPES = [{\n  label: 'H1',\n  style: 'header-one'\n}, {\n  label: 'H2',\n  style: 'header-two'\n}, {\n  label: 'H3',\n  style: 'header-three'\n}, {\n  label: 'H4',\n  style: 'header-four'\n}, {\n  label: 'H5',\n  style: 'header-five'\n}, {\n  label: 'H6',\n  style: 'header-six'\n}, {\n  label: 'Blockquote',\n  style: 'blockquote'\n}, {\n  label: 'UL',\n  style: 'unordered-list-item'\n}, {\n  label: 'OL',\n  style: 'ordered-list-item'\n}, {\n  label: 'Code Block',\n  style: 'code-block'\n}];\n\nvar BlockStyleControls = function BlockStyleControls(props) {\n  var editorState = props.editorState;\n  var selection = editorState.getSelection();\n  var blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  return __jsx(\"div\", {\n    className: \"RichEditor-controls\"\n  }, BLOCK_TYPES.map(function (type) {\n    return __jsx(StyleButton, {\n      key: type.label,\n      active: type.style === blockType,\n      label: type.label,\n      onToggle: props.onToggle,\n      style: type.style\n    });\n  }));\n};\n\nvar INLINE_STYLES = [{\n  label: 'Bold',\n  style: 'BOLD'\n}, {\n  label: 'Italic',\n  style: 'ITALIC'\n}, {\n  label: 'Underline',\n  style: 'UNDERLINE'\n}, {\n  label: 'Monospace',\n  style: 'CODE'\n}];\n\nvar InlineStyleControls = function InlineStyleControls(props) {\n  var currentStyle = props.editorState.getCurrentInlineStyle();\n  return __jsx(\"div\", {\n    className: \"RichEditor-controls\"\n  }, INLINE_STYLES.map(function (type) {\n    return __jsx(StyleButton, {\n      key: type.label,\n      active: currentStyle.has(type.style),\n      label: type.label,\n      onToggle: props.onToggle,\n      style: type.style\n    });\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}