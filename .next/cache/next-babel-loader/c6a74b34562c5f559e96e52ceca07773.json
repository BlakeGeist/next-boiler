{"ast":null,"code":"var _Promise = require(\"@babel/runtime-corejs2/core-js/promise\");\n\nconst AWS = require(\"aws-sdk\");\n\nconst admin = require(\"firebase-admin\");\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(require(\"../credentials/server\"))\n  });\n}\n\nconst db = admin.firestore();\n\nconst cors = require(\"cors\")({\n  origin: true\n});\n\nconst stringsCollection = db.collection(\"strings\"); //takes a string(text) and a (slug)\n//check the database for if the slug already exists\n//if it does, this should prolly be an update function\n//if the string does not exist, run the createString funciton\n\nexports.handler = (req, res) => {\n  cors(req, res, async () => {\n    const {\n      slug,\n      text,\n      scope\n    } = req.body;\n\n    try {\n      var existingDoc = stringsCollection.doc(slug).get();\n      var docExists = existingDoc.exists;\n\n      if (docExists) {//// TODO: create update strings function\n      } else {\n        const strings = await createStrings(text, slug, scope);\n        res.status(200).send(strings);\n      }\n    } catch (error) {\n      res.status(500).send(error);\n    }\n  });\n}; //takes a string(text) and a (slug)\n//check the database for if the slug already exists\n//if it does, this should prolly be an update function\n//if the string does not exist, run the createString funciton\n\n\nasync function createStrings(stringText, slug, scope) {\n  const object = {\n    ar: await getTranslatedString(stringText, \"ar\"),\n    da: await getTranslatedString(stringText, \"da\"),\n    de: await getTranslatedString(stringText, \"de\"),\n    en: await getTranslatedString(stringText, \"en\"),\n    es: await getTranslatedString(stringText, \"es\"),\n    fr: await getTranslatedString(stringText, \"fr\"),\n    it: await getTranslatedString(stringText, \"it\"),\n    jp: await getTranslatedString(stringText, \"ja\"),\n    ko: await getTranslatedString(stringText, \"ko\"),\n    pt: await getTranslatedString(stringText, \"pt\"),\n    ru: await getTranslatedString(stringText, \"ru\")\n  };\n  stringsCollection.doc(scope).collection(\"strings\").doc(slug).set(object).then(() => {\n    return object;\n  }).catch(e => {});\n  return object;\n} //takes a string and a target language, sends it to AWS translate, and returns the result\n\n\nasync function getTranslatedString(string, targetLang) {\n  AWS.config.region = \"us-east-1\";\n  var ep = new AWS.Endpoint(\"https://translate.us-east-1.amazonaws.com\");\n  AWS.config.credentials = new AWS.Credentials(\"AKIAJQLVBELRL5AAMZOA\", \"Kl0ArGHFySw+iBEdGXZDrTch2V5VAaDbSs+EKKEZ\");\n  var translate = new AWS.Translate();\n  translate.endpoint = ep;\n  var params = {\n    Text: string,\n    SourceLanguageCode: \"en\",\n    TargetLanguageCode: targetLang\n  };\n  var promise = new _Promise((resolve, reject) => {\n    translate.translateText(params, (err, data) => {\n      if (err) return reject(err);else {\n        return resolve(data);\n      }\n    });\n  });\n  var result = await promise;\n  return result.TranslatedText;\n}","map":null,"metadata":{},"sourceType":"script"}