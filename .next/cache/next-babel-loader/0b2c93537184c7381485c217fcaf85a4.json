{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Layout from \"../../../layouts/Layout\";\nimport AddProductForm from './components/AddProductFrom';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport clientCredentials from \"../../../credentials/client\";\nimport Link from 'next/link';\nimport { connect } from \"react-redux\";\n\nconst ProductsPage = ({\n  lang,\n  products\n}) => {\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"jsx-2124841316\" + \" \" + \"container\"\n  }, __jsx(\"h1\", {\n    className: \"jsx-2124841316\"\n  }, \"Products\"), __jsx(AddProductForm, null), __jsx(\"div\", {\n    className: \"jsx-2124841316\" + \" \" + \"products\"\n  }, products.map((product, i) => {\n    product = product[_Object$keys(product)[0]];\n    return __jsx(\"div\", {\n      key: i,\n      className: \"jsx-2124841316\" + \" \" + \"products-product\"\n    }, __jsx(\"div\", {\n      className: \"jsx-2124841316\" + \" \" + \"products-product-name\"\n    }, \"Name: \", __jsx(Link, {\n      href: `/[lang]/p/${product.name}`,\n      as: `/${lang}/p/${product.name}`\n    }, product.name)), __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: product.description\n      },\n      className: \"jsx-2124841316\" + \" \" + \"products-product-description\"\n    }));\n  }))), __jsx(_JSXStyle, {\n    id: \"2124841316\"\n  }, [\".products.jsx-2124841316{margin-top:35px;}\", \".products-product.jsx-2124841316{border-bottom:2px solid #ccc;margin-top:35px;}\", \".products-product.jsx-2124841316:first-of-type{margin:0;}\", \".products-product.jsx-2124841316:last-of-type{border-bottom:none;}\"]));\n};\n\nProductsPage.getInitialProps = async ({\n  reduxStore,\n  res\n}) => {\n  if (!firebase.apps.length) {\n    firebase.initializeApp(clientCredentials);\n  }\n\n  ;\n  const db = firebase.app().firestore();\n  const productsCollection = db.collection(\"products\");\n  const productsResponse = await productsCollection.get();\n  const products = productsResponse.docs.map(d => {\n    return {\n      [d.id]: d.data()\n    };\n  });\n  return {\n    products\n  };\n};\n\nexport default connect(state => state)(ProductsPage);","map":null,"metadata":{},"sourceType":"module"}