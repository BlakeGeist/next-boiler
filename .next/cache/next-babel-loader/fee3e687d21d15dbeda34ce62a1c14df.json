{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport clientCredentials from \"../../credentials/client\";\nexport default (async ctx => {\n  if (!firebase.apps.length) {\n    firebase.initializeApp(clientCredentials);\n  }\n\n  ;\n  const db = firebase.app().firestore();\n  const usersRef2 = db.collection(\"strings\").doc(\"global\");\n  await usersRef2.get().then(async docSnapshot => {\n    if (docSnapshot.exists) {\n      let strings = db.collection(\"strings\").doc(\"global\").collection(\"strings\");\n      await strings.get().then(snap => {\n        strings = snap.docs.map(d => {\n          return {\n            [d.id]: d.data()\n          };\n        });\n\n        const objectizedStrings = _Object$assign({}, ...strings);\n\n        ctx.reduxStore.dispatch({\n          type: \"SET_ITEM\",\n          name: \"strings\",\n          payload: objectizedStrings\n        });\n      }).catch(e => {});\n    } else {}\n  });\n});","map":{"version":3,"sources":["C:/Users/Blake Geist/Documents/blakes-apps/react/next-firebase-boiler/src/app/pages/helpers/getGlobalStrings.js"],"names":["firebase","clientCredentials","ctx","apps","length","initializeApp","db","app","firestore","usersRef2","collection","doc","get","then","docSnapshot","exists","strings","snap","docs","map","d","id","data","objectizedStrings","reduxStore","dispatch","type","name","payload","catch","e"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AAEA,gBAAe,MAAOC,GAAP,IAAe;AAC1B,MAAI,CAACF,QAAQ,CAACG,IAAT,CAAcC,MAAnB,EAA2B;AACvBJ,IAAAA,QAAQ,CAACK,aAAT,CAAuBJ,iBAAvB;AACH;;AAAA;AACD,QAAMK,EAAE,GAAGN,QAAQ,CAACO,GAAT,GAAeC,SAAf,EAAX;AACA,QAAMC,SAAS,GAAGH,EAAE,CAACI,UAAH,CAAc,SAAd,EAAyBC,GAAzB,CAA6B,QAA7B,CAAlB;AACA,QAAMF,SAAS,CAACG,GAAV,GACDC,IADC,CACI,MAAOC,WAAP,IAAuB;AACzB,QAAIA,WAAW,CAACC,MAAhB,EAAwB;AACpB,UAAIC,OAAO,GAAGV,EAAE,CAACI,UAAH,CAAc,SAAd,EAAyBC,GAAzB,CAA6B,QAA7B,EAAuCD,UAAvC,CAAkD,SAAlD,CAAd;AACA,YAAMM,OAAO,CAACJ,GAAR,GACDC,IADC,CACII,IAAI,IAAG;AACTD,QAAAA,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUC,GAAV,CAAcC,CAAC,IAAI;AACzB,iBAAO;AACH,aAACA,CAAC,CAACC,EAAH,GAAQD,CAAC,CAACE,IAAF;AADL,WAAP;AAGH,SAJS,CAAV;;AAKA,cAAMC,iBAAiB,GAAG,eAAc,EAAd,EAAkB,GAAGP,OAArB,CAA1B;;AACAd,QAAAA,GAAG,CAACsB,UAAJ,CAAeC,QAAf,CAAwB;AAAEC,UAAAA,IAAI,EAAE,UAAR;AAAoBC,UAAAA,IAAI,EAAE,SAA1B;AAAqCC,UAAAA,OAAO,EAAGL;AAA/C,SAAxB;AACH,OATC,EAUDM,KAVC,CAUKC,CAAC,IAAI,CACX,CAXC,CAAN;AAYH,KAdD,MAcO,CACN;AACJ,GAlBC,CAAN;AAmBH,CAzBD","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport clientCredentials from \"../../credentials/client\";\r\n\r\nexport default async (ctx) => {\r\n    if (!firebase.apps.length) {\r\n        firebase.initializeApp(clientCredentials);\r\n    };\r\n    const db = firebase.app().firestore();\r\n    const usersRef2 = db.collection(\"strings\").doc(\"global\");\r\n    await usersRef2.get()\r\n        .then(async (docSnapshot) => {\r\n            if (docSnapshot.exists) {\r\n                let strings = db.collection(\"strings\").doc(\"global\").collection(\"strings\");\r\n                await strings.get()\r\n                    .then(snap =>{\r\n                        strings = snap.docs.map(d => {\r\n                            return {\r\n                                [d.id]: d.data()\r\n                            };\r\n                        });\r\n                        const objectizedStrings = Object.assign({}, ...strings);\r\n                        ctx.reduxStore.dispatch({ type: \"SET_ITEM\", name: \"strings\", payload:  objectizedStrings});\r\n                    })\r\n                    .catch(e => {\r\n                    });\r\n            } else {\r\n            }\r\n        });    \r\n};\r\n"]},"metadata":{},"sourceType":"module"}