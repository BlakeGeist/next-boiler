{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport clientCredentials from \"../../credentials/client\";\nexport default /*#__PURE__*/(function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx) {\n    var db, usersRef2;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!firebase.apps.length) {\n              firebase.initializeApp(clientCredentials);\n            }\n\n            ;\n            db = firebase.app().firestore();\n            usersRef2 = db.collection(\"strings\").doc(\"global\");\n            _context2.next = 6;\n            return usersRef2.get().then( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(docSnapshot) {\n                var strings;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!docSnapshot.exists) {\n                          _context.next = 6;\n                          break;\n                        }\n\n                        strings = db.collection(\"strings\").doc(\"global\").collection(\"strings\");\n                        _context.next = 4;\n                        return strings.get().then(function (snap) {\n                          strings = snap.docs.map(function (d) {\n                            return _defineProperty({}, d.id, d.data());\n                          });\n\n                          var objectizedStrings = _Object$assign.apply(Object, [{}].concat(_toConsumableArray(strings)));\n\n                          ctx.reduxStore.dispatch({\n                            type: \"SET_ITEM\",\n                            name: \"strings\",\n                            payload: objectizedStrings\n                          });\n                        })[\"catch\"](function (e) {});\n\n                      case 4:\n                        _context.next = 6;\n                        break;\n\n                      case 6:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["C:/Users/Blake Geist/Documents/blakes-apps/react/next-firebase-boiler/src/app/pages/helpers/getGlobalStrings.js"],"names":["firebase","clientCredentials","ctx","apps","length","initializeApp","db","app","firestore","usersRef2","collection","doc","get","then","docSnapshot","exists","strings","snap","docs","map","d","id","data","objectizedStrings","Object","reduxStore","dispatch","type","name","payload","e"],"mappings":";;;;;AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AAEA;AAAA,sEAAe,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,gBAAI,CAACF,QAAQ,CAACG,IAAT,CAAcC,MAAnB,EAA2B;AACvBJ,cAAAA,QAAQ,CAACK,aAAT,CAAuBJ,iBAAvB;AACH;;AAAA;AACKK,YAAAA,EAJK,GAIAN,QAAQ,CAACO,GAAT,GAAeC,SAAf,EAJA;AAKLC,YAAAA,SALK,GAKOH,EAAE,CAACI,UAAH,CAAc,SAAd,EAAyBC,GAAzB,CAA6B,QAA7B,CALP;AAAA;AAAA,mBAMLF,SAAS,CAACG,GAAV,GACDC,IADC;AAAA,mFACI,iBAAOC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACEA,WAAW,CAACC,MADd;AAAA;AAAA;AAAA;;AAEMC,wBAAAA,OAFN,GAEgBV,EAAE,CAACI,UAAH,CAAc,SAAd,EAAyBC,GAAzB,CAA6B,QAA7B,EAAuCD,UAAvC,CAAkD,SAAlD,CAFhB;AAAA;AAAA,+BAGQM,OAAO,CAACJ,GAAR,GACDC,IADC,CACI,UAAAI,IAAI,EAAG;AACTD,0BAAAA,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUC,GAAV,CAAc,UAAAC,CAAC,EAAI;AACzB,uDACKA,CAAC,CAACC,EADP,EACYD,CAAC,CAACE,IAAF,EADZ;AAGH,2BAJS,CAAV;;AAKA,8BAAMC,iBAAiB,GAAG,qBAAAC,MAAM,GAAQ,EAAR,4BAAeR,OAAf,GAAhC;;AACAd,0BAAAA,GAAG,CAACuB,UAAJ,CAAeC,QAAf,CAAwB;AAAEC,4BAAAA,IAAI,EAAE,UAAR;AAAoBC,4BAAAA,IAAI,EAAE,SAA1B;AAAqCC,4BAAAA,OAAO,EAAGN;AAA/C,2BAAxB;AACH,yBATC,WAUK,UAAAO,CAAC,EAAI,CACX,CAXC,CAHR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ;;AAAA;AAAA;AAAA;AAAA,gBANK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport clientCredentials from \"../../credentials/client\";\r\n\r\nexport default async (ctx) => {\r\n    if (!firebase.apps.length) {\r\n        firebase.initializeApp(clientCredentials);\r\n    };\r\n    const db = firebase.app().firestore();\r\n    const usersRef2 = db.collection(\"strings\").doc(\"global\");\r\n    await usersRef2.get()\r\n        .then(async (docSnapshot) => {\r\n            if (docSnapshot.exists) {\r\n                let strings = db.collection(\"strings\").doc(\"global\").collection(\"strings\");\r\n                await strings.get()\r\n                    .then(snap =>{\r\n                        strings = snap.docs.map(d => {\r\n                            return {\r\n                                [d.id]: d.data()\r\n                            };\r\n                        });\r\n                        const objectizedStrings = Object.assign({}, ...strings);\r\n                        ctx.reduxStore.dispatch({ type: \"SET_ITEM\", name: \"strings\", payload:  objectizedStrings});\r\n                    })\r\n                    .catch(e => {\r\n                    });\r\n            } else {\r\n            }\r\n        });    \r\n};\r\n"]},"metadata":{},"sourceType":"module"}