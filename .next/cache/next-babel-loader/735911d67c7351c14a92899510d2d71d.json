{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport clientCredentials from \"../credentials/client\";\nimport Router from \"next/router\";\nimport { compose, withState } from \"recompose\";\nimport AuthForm from \"./AuthForm\";\nimport { connect } from \"react-redux\";\nimport cookie from \"js-cookie\";\n\nvar LoginBase = function LoginBase(_ref) {\n  var setState = _ref.setState,\n      state = _ref.state,\n      dispatch = _ref.dispatch,\n      lang = _ref.lang;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(clientCredentials);\n  }\n\n  ;\n  var email = state.email,\n      password = state.password,\n      isLoading = state.isLoading,\n      errorMessage = state.errorMessage;\n\n  var handleChange = function handleChange(event) {\n    var tempObj = _objectSpread({}, state);\n\n    tempObj[event.target.name] = event.target.value;\n    setState(tempObj);\n  };\n\n  function updateState(item, payload) {\n    var tempObj = _objectSpread({}, state);\n\n    tempObj[item] = payload;\n    setState(tempObj);\n  }\n\n  var handleEmailPassAuth = function handleEmailPassAuth(e) {\n    e.preventDefault();\n    updateState(\"isLoading\", true);\n    var email = state.email,\n        password = state.password;\n    firebase.auth().signInWithEmailAndPassword(email, password).then(function (response) {\n      response.user.getIdToken().then(function (token) {\n        //dispatch({ type: 'SET_ITEM', name: 'user', payload: user });\n        // eslint-disable-next-line no-undef\n        cookie.set(\"token2\", token, {\n          expires: 1\n        });\n        dispatch({\n          type: \"SET_ITEM\",\n          name: \"modalTarget\",\n          payload: null\n        });\n      });\n      dispatch({\n        type: \"SET_ITEM\",\n        name: \"user\",\n        payload: response.user\n      });\n      dispatch({\n        type: \"SET_ITEM\",\n        name: \"isLoggedIn\",\n        payload: true\n      });\n    })[\"catch\"](function (error) {\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      updateState(\"isLoading\", false);\n\n      if (errorCode === \"auth/user-not-found\") {\n        errorMessage = \"User not found please register\";\n      }\n\n      updateState(\"errorMessage\", errorMessage);\n    });\n  };\n\n  return __jsx(AuthForm, {\n    errorMessage: errorMessage,\n    email: email,\n    password: password,\n    handleEmailPassAuth: handleEmailPassAuth,\n    handleChange: handleChange\n  });\n};\n\nvar Login = compose(withState(\"state\", \"setState\", {\n  email: \"\",\n  password: \"\",\n  isLoading: false,\n  errorMessage: \"\"\n}))(LoginBase);\nexport default connect(function (state) {\n  return state;\n})(Login);","map":null,"metadata":{},"sourceType":"module"}